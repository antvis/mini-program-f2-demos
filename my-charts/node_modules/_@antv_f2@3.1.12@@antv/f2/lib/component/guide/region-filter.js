function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Util = require('../../util/common');
var GuideBase = require('./base');

var _require = require('../../graphic/shape'),
    Rect = _require.Rect;

var RegionFilter = function (_GuideBase) {
  _inherits(RegionFilter, _GuideBase);

  function RegionFilter() {
    _classCallCheck(this, RegionFilter);

    return _possibleConstructorReturn(this, _GuideBase.apply(this, arguments));
  }

  RegionFilter.prototype._initDefaultCfg = function _initDefaultCfg() {
    this.type = 'regionFilter';
    this.start = [];
    this.end = [];
    this.color = null;
    this.style = null; // 附加的样式
  };

  RegionFilter.prototype.render = function render(coord) {
    var start = this.parsePoint(coord, this.start);
    var end = this.parsePoint(coord, this.end);

    var clip = new Rect({
      attrs: {
        x: Math.min(start.x, end.x),
        y: Math.min(start.y, end.y),
        width: Math.abs(end.x - start.x),
        height: Math.abs(end.y - start.y)
      }
    }); // 新建剪切区域
    this.clip = clip;

    var chart = this.chart;
    var color = this.color;
    var style = this.style || {};
    var regionElements = [];

    var geoms = chart.get('geoms');
    geoms.map(function (geom) {
      var geomContainer = geom.get('container');
      var children = geomContainer.get('children');
      // 需要参与动画
      var group = geomContainer.addGroup({
        zIndex: 10,
        className: 'guide-region-filter'
      });

      children.map(function (c) {
        if (c.get('isShape')) {
          var type = c.get('type');
          var attrs = Util.mix({}, c.get('attrs'), style);
          if (color && (attrs.fill || attrs.fillStyle)) {
            attrs.fill = attrs.fillStyle = color;
          }
          if (color && (attrs.stroke || attrs.strokeStyle)) {
            attrs.stroke = attrs.strokeStyle = color;
          }

          group.addShape(type, {
            attrs: attrs
          });
        }
        return c;
      });

      group.attr('clip', clip);
      geomContainer.sort();
      regionElements.push(group);
      return geom;
    });

    this.element = regionElements;
  };

  RegionFilter.prototype.remove = function remove() {
    var element = this.element;

    Util.each(element, function (group) {
      group && group.remove(true);
    });

    this.clip && this.clip.remove(true);
  };

  return RegionFilter;
}(GuideBase);

GuideBase.RegionFilter = RegionFilter;
module.exports = RegionFilter;