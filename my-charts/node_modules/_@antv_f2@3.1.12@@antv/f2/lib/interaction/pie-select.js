function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Util = require('../util/common');
var Interaction = require('./base');
var Chart = require('../chart/chart');

var PieSelect = function (_Interaction) {
  _inherits(PieSelect, _Interaction);

  function PieSelect() {
    _classCallCheck(this, PieSelect);

    return _possibleConstructorReturn(this, _Interaction.apply(this, arguments));
  }

  PieSelect.prototype.getDefaultCfg = function getDefaultCfg() {
    var defaultCfg = _Interaction.prototype.getDefaultCfg.call(this);
    return Util.mix({}, defaultCfg, {
      animate: false,
      offset: 1, // 间距
      appendRadius: 8, // 光环的大小
      style: {
        fillOpacity: 0.5
      },
      cancelable: true // 选中之后是否允许取消选中，默认允许取消选中
    });
  };

  PieSelect.prototype.start = function start(ev) {
    var chart = this.chart;
    if (ev.type === 'tap') {
      ev.clientX = ev.center.x;
      ev.clientY = ev.center.y;
    }

    var _Util$createEvent = Util.createEvent(ev, chart),
        x = _Util$createEvent.x,
        y = _Util$createEvent.y;

    this.halo && this.halo.remove(true);

    var records = chart.getSnapRecords({ x: x, y: y });
    if (!records.length) {
      this.selected = false;
      this.selectedShape = null;
      return;
    }

    var selectedShape = void 0;
    var data = records[0]._origin;
    var geom = chart.get('geoms')[0];
    var container = geom.get('container');
    var children = container.get('children');
    // 饼图的 bbox 范围查找不精确，所以使用数据比对
    Util.each(children, function (child) {
      if (child.get('isShape') && child.get('className') === geom.get('type')) {
        // get geometry's shape
        var shapeData = child.get('origin')._origin;
        if (Object.is(shapeData, data)) {
          // 判断是否相同
          selectedShape = child;
          return false;
        }
      }
    });
    var lastShape = this.lastShape;
    this.selectedShape = selectedShape;
    this.selected = true;
    if (selectedShape === lastShape) {
      // 上去被选中的
      if (!this.cancelable) {
        // 不允许取消选中
        return;
      }
      this.halo && this.halo.remove(true);
      this.lastShape = null;
      this.selected = false;
    } else {
      this.lastShape = selectedShape;
      var _selectedShape$_attrs = selectedShape._attrs.attrs,
          _x = _selectedShape$_attrs.x,
          _y = _selectedShape$_attrs.y,
          startAngle = _selectedShape$_attrs.startAngle,
          endAngle = _selectedShape$_attrs.endAngle,
          r = _selectedShape$_attrs.r,
          fill = _selectedShape$_attrs.fill;

      var frontPlot = chart.get('frontPlot');
      var offset = this.offset,
          style = this.style,
          appendRadius = this.appendRadius;

      var halo = frontPlot.addShape('sector', {
        attrs: Util.mix({
          x: _x,
          y: _y,
          r: r + offset + appendRadius,
          r0: r + offset,
          fill: fill,
          startAngle: startAngle,
          endAngle: endAngle
        }, style)
      });
      this.halo = halo;
      var animate = this.animate;
      if (animate) {
        if (animate === true) {
          animate = {
            duration: 300
          };
        }
        halo.attr('r', r + offset);
        halo.animate().to(Util.mix({
          attrs: {
            r: r + offset + appendRadius
          }
        }, animate));
      }
    }

    this.canvas.draw();
  };

  PieSelect.prototype.end = function end(ev) {
    var selectedShape = this.selectedShape;
    if (selectedShape && !selectedShape.get('destroyed')) {
      ev.data = selectedShape.get('origin')._origin; // 绘制数据，包含原始数据啊
      ev.shapeInfo = selectedShape.get('origin');
      ev.shape = selectedShape;
      ev.selected = !!this.selected;
    }
  };

  return PieSelect;
}(Interaction);

Chart.registerInteraction('pie-select', PieSelect);
module.exports = PieSelect;